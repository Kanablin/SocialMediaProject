1. Comprehensive Test Case - Jakob
  - Connecting classes
2. Focus on basic functionality requirement needed - Alex 
3. Database is supposed to be concurrent (HW10 CHALLENGE!!!) - Sripoorna
4. ReadMe needs to add how to run the code - At the end. 

Phase 2:
1. Server
2. Database
3. Multiple Client
- Have to have multiple clients with a single server
Needs to make it threads safe to make it able for multiple clients
how to do it:
- accept function in dataSocket
1. Accept connection from client
2. Create two threads (1 for reading, other for writing to client) > all for communication for one client
3. Then, two threads for another client
4. continue...
5. Messages is more difficult as it's real time and needs to know 
  - Getting message from one person, want to send message to another guy, have to keep track in hashmap or hashtable to map the things
- map the messages and thread object as well
you don't know if if c3 is keeping track with c1
C2 > Server > C1
Start server, create client, send in username password, info send to network, to server, server check db, send info back to client
Simulate that with test cases

Phase 2 steps
- while loop that accept continuous clients
0 Every conection you spawn a thread, sockethandler, handle input output
- socket handler post > event handler > call to 

phase 2 steps
- while loop that accept continuos clients
- socket handler (runnable on each clients)
- socket handler handle commands
- needs eventhandler for messages so you can post and subscribe (like a digital newsletter) to eventhandler (publisher would be the socket itself, socket will receive command the user get the message, each socket handler can post to the eventhandler)

11/8 goals:
- Explain phase 1 code
- Understand changes and doing changes for phase 1
- learn about phase 2 and its technologies
- Assign phase 2 roles
- Start phase 2

11/11 notes:
- adding, removing, setting, writing (have concurrency)

11/13 notes:
- 1 person take care of test, other person take care of code
    - netowrk
    - connect server to client
    - test
- 1 person take care fo connecting servers and database connection and interaction with client
- both working on networing and threads

 - features
  - just focus on implementing the core part *sending mesage to friends, receiving from friends)
    - don't do anything extra
    - no need for blocking, just send messages to friends

  - user
    - user may change passwords
    - send and delete mesages fine
    - block is not needed
  - functionaity
    - user profile 
    - profile
    - password login
    - user search and user viewer (no need) no need for profile view
    - restrict message to all or friends only 
  - test case
    - should be comprehensive, no need to check all cases
    - functionalities
